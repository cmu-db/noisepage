sudo: required
language: cpp
matrix:
  fast_finish: true
  include:
    - os: osx
      osx_image: xcode10.1
      compiler: clang
      env:
        - NAME="macos-10.14/AppleClang-1001.0.46.4 (Debug/packages.sh)" CMAKE_BUILD_TYPE=debug
      install:
        - echo 'y' | ./script/installation/packages.sh
        - export LLVM_DIR=/usr/local/Cellar/llvm/8.0.1
    - os: linux
      dist: trusty
      env:
        - NAME="ubuntu-18.04/gcc-7.3.0 (Debug/packages.sh)" CMAKE_BUILD_TYPE=debug DOCKER=true
      install:
        - docker pull ubuntu:18.04
        - docker run -itd --name build ubuntu:18.04
        - docker cp . build:/repo
        - docker exec build /bin/sh -c "echo 'y' | /repo/script/installation/packages.sh"
    - os: linux
      dist: trusty
      env:
        - NAME="ubuntu-18.04/gcc-7.3.0 (Debug/Dockerfile)" CMAKE_BUILD_TYPE=debug DOCKER=true
      install:
        - docker build -t cmu-db/terrier .
        - docker run -itd --name build cmu-db/terrier
        - docker cp . build:/repo
    - os: linux
      dist: trusty
      env:
        - NAME="ubuntu-18.04/clang-8.0.0 (Debug/Dockerfile)" CMAKE_BUILD_TYPE=debug DOCKER=true
      install:
        - docker build -t cmu-db/terrier .
        - docker run -itd -e "CC=/usr/bin/clang-8" -e "CXX=/usr/bin/clang++-8" --name build cmu-db/terrier
        - docker cp . build:/repo
    - os: linux
      dist: trusty
      env:
      - NAME="ubuntu-18.04/gcc-7.3.0 (Debug/Coverage)" CMAKE_BUILD_TYPE=debug TERRIER_USE_ASAN=Off DOCKER=true ci_env=`bash <(curl -s https://codecov.io/env)`
      install:
      - ci_env=`bash <(curl -s https://codecov.io/env)`
      - docker build -t cmu-db/terrier .
      - docker run $ci_env -itd --name build cmu-db/terrier
      - docker cp . build:/repo
      before_script:
      - docker exec build /bin/sh -c "apt-get -y install curl lcov"
      - docker exec build /bin/sh -c "mkdir -p /repo/build"
      - docker exec build /bin/sh -c "cd /repo/build && cmake -DCMAKE_BUILD_TYPE=debug -DTERRIER_GENERATE_COVERAGE=ON  -DTERRIER_BUILD_BENCHMARKS=OFF .."
      - docker exec build /bin/sh -c "cd /repo/build && make unittest -j 4"
      - docker exec build /bin/sh -c "cd /repo/build && make check-tpl"
      - docker exec build /bin/sh -c "cd /repo/build && lcov --directory . --capture --output-file coverage.info" # capture coverage info
      - docker exec build /bin/sh -c "cd /repo/build && lcov --remove coverage.info '/usr/*' --output-file coverage.info" # filter out system
      - docker exec build /bin/sh -c "cd /repo/build && lcov --remove coverage.info '*/build/*' --output-file coverage.info" # filter out build
      - docker exec build /bin/sh -c "cd /repo/build && lcov --remove coverage.info '*/third_party/*' --output-file coverage.info" # filter out third_party
      - docker exec build /bin/sh -c "cd /repo/build && lcov --remove coverage.info '*/benchmark/*' --output-file coverage.info" # filter out benchmark
      - docker exec build /bin/sh -c "cd /repo/build && lcov --remove coverage.info '*/test/*' --output-file coverage.info" # filter out test
      - docker exec build /bin/sh -c "cd /repo/build && lcov --remove coverage.info '*/src/main/*' --output-file coverage.info" # filter out main
      - docker exec build /bin/sh -c "cd /repo/build && lcov --list coverage.info" # debug info
      script:
      - docker exec build /bin/bash -c "cd /repo/build && bash <(curl -s https://codecov.io/bash) -X gcov"

before_script:
  - if [[ "$DOCKER" = true ]]; then
      docker exec build /bin/sh -c "cd /repo/apidoc && touch warnings.txt && doxygen Doxyfile.in 2>warnings.txt && (cat warnings.txt | grep -v Doxyfile.in > warnings.txt || true) && if [ -s warnings.txt ]; then cat warnings.txt; false; fi" &&
      docker exec build /bin/sh -c "mkdir -p /repo/build" &&
      docker exec -e CMAKE_BUILD_TYPE="$CMAKE_BUILD_TYPE" build /bin/sh -c "cd /repo/build && cmake -DCMAKE_BUILD_TYPE=$CMAKE_BUILD_TYPE .." &&
      docker exec build /bin/sh -c "cd /repo/build && make check-format" &&
      docker exec build /bin/sh -c "cd /repo/build && make check-lint" &&
      docker exec build /bin/sh -c "cd /repo/build && make check-censored";
    else
      cd apidoc &&
      touch warnings.txt &&
      doxygen Doxyfile.in 2>warnings.txt &&
      (cat warnings.txt | grep -v Doxyfile.in > warnings.txt || true) &&
      if [ -s warnings.txt ]; then cat warnings.txt; false; fi &&
      cd .. &&
      mkdir build &&
      cd build &&
      cmake -DCMAKE_BUILD_TYPE=$CMAKE_BUILD_TYPE .. &&
      make check-format &&
      make check-lint &&
      make check-censored;
    fi

script:
  - if [[ "$DOCKER" = true ]]; then
      docker exec build /bin/sh -c "cd /repo/build && make -j4";
    else
      make -j4;
    fi

