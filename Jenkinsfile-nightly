pipeline {
    agent none

    environment{
        //Do not change. 
        //Performance Storage Service(Django) authentication information. The credentials can only be changed on Jenkins webpage
        PSS_CREATOR= credentials('pss-creator')
    }
    options {
        buildDiscarder(logRotator(daysToKeepStr: '30'))
        parallelsAlwaysFailFast()
    }

    triggers {
        cron('H H(2-3) * * *')
    }

    stages {
        stage('Performance') {
            agent { label 'benchmark' }
            steps {
                sh 'echo $NODE_NAME'
                sh script:'echo y | sudo ./script/installation/packages.sh all', label: 'Installing packages'

                sh script:'''
                mkdir build
                cd build
                cmake -GNinja -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DCMAKE_BUILD_TYPE=Release -DNOISEPAGE_USE_ASAN=OFF -DNOISEPAGE_USE_JEMALLOC=ON -DNOISEPAGE_BUILD_TESTS=OFF ..
                ninja noisepage''', label: 'Compiling'

                catchError(stageResult: 'Failure'){
                    sh script:'''
                    cd build
                    timeout 3h python3 ../script/testing/oltpbench/run_oltpbench.py --config-file=../script/testing/oltpbench/configs/nightly/nightly.json --build-type=release --publish-results=prod --publish-username=${PSS_CREATOR_USR} --publish-password=${PSS_CREATOR_PSW}
                    ''', label: 'OLTPBench (HDD WAL)'
                }
                catchError(stageResult: 'Failure'){
                    sh script:'''
                    cd build
                    timeout 3h python3 ../script/testing/oltpbench/run_oltpbench.py --config-file=../script/testing/oltpbench/configs/nightly/nightly_ramdisk.json --build-type=release --publish-results=prod --publish-username=${PSS_CREATOR_USR} --publish-password=${PSS_CREATOR_PSW}
                    ''', label: 'OLTPBench (RamDisk WAL)'
                }
                catchError(stageResult: 'Failure'){
                    sh script:'''
                    cd build
                    timeout 3h python3 ../script/testing/oltpbench/run_oltpbench.py --config-file=../script/testing/oltpbench/configs/nightly/nightly_wal_disabled.json --build-type=release --publish-results=prod --publish-username=${PSS_CREATOR_USR} --publish-password=${PSS_CREATOR_PSW}
                    ''', label: 'OLTPBench (No WAL)'
                }

                archiveArtifacts(artifacts: 'build/oltp_result/**/*.*', excludes: 'build/oltp_result/**/*.csv', fingerprint: true)
            }
            post {
                cleanup {
                    deleteDir()
                }
            }
        }

        stage('Microbenchmark') {
            agent { label 'benchmark' }
            steps {
                sh 'echo $NODE_NAME'
                sh script:'echo y | sudo ./script/installation/packages.sh all', label: 'Installing packages'

                sh script:'''
                mkdir build
                cd build
                cmake -GNinja -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DCMAKE_BUILD_TYPE=Release -DNOISEPAGE_USE_ASAN=OFF -DNOISEPAGE_USE_JEMALLOC=ON -DNOISEPAGE_BUILD_TESTS=OFF ..
                ninja''', label: 'Compiling'

                script { // TODO: This script block is temporary to get some initial data into microbenchmarks
                    def iterations = 4
                    for(int i = 0;i < iterations; i++){
                        // The micro_bench configuration has to be consistent because we currently check against previous runs with the same config
                        //  # of Threads: 4
                        //  WAL Path: Ramdisk
                        sh script:'''
                        cd script/testing
                        python3 microbench/run_microbench.py --run --num-threads=4 --benchmark-path $(pwd)/../../build/benchmark --logfile-path=/mnt/ramdisk/benchmark.log --publish-results=prod --publish-username=${PSS_CREATOR_USR} --publish-password=${PSS_CREATOR_PSW}
                        ''', label:'Microbenchmark'

                        archiveArtifacts 'script/testing/*.json'
                        junit 'script/testing/*.xml'
                        // This next line can be removed when the loop is removed
                        sh 'rm script/testing/*.json'
                        sh 'rm script/testing/*.xml'
                    }

                }

            }
            post {
                cleanup {
                    deleteDir()
                }
            }
        }
    }
}
