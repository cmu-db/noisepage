def utils // common build functions are loaded from Jenkinsfile-utils into this object
String utilsFileName  = 'Jenkinsfile-utils'


pipeline {
    agent none
    environment {
        //Do not change.
        //Performance Storage Service(Django) authentication information. The credentials can only be changed on Jenkins webpage
        PSS_CREATOR = credentials('pss-creator')
    }
    options {
        buildDiscarder(logRotator(daysToKeepStr: '30'))
        parallelsAlwaysFailFast()
    }

    triggers {
        cron('H H(2-3) * * *')
    }

    stages {
        stage('Artifact Stats') {
            agent {
                docker {
                    image 'noisepage:focal'
                }
            }
            steps {
                sh 'echo $NODE_NAME'
                sh 'echo y | sudo ./script/installation/packages.sh all'

                // The following command compiles and builds the binary without caching and times the whole operation. 
                // The time gets output to a file which an artifact stats collector reads, in order to report the metrics.
                script{
                    utils = utils ?: load(utilsFileName)
                    utils.noisePageBuild(useCache:false, buildType:utils.RELEASE_BUILD, isBuildTests:false, isRecordTime:true)
                }

                sh script: '''
                cd build
                python3 ../script/testing/artifact_stats/run_artifact_stats.py --publish-results=prod --publish-username=${PSS_CREATOR_USR} --publish-password=${PSS_CREATOR_PSW}
                ''', label: 'Artifact Stats'
            }
            post {
                cleanup {
                    deleteDir()
                }
            }
        }
        stage('Performance') {
            agent { label 'benchmark' }
            steps {
                sh 'echo $NODE_NAME'
                sh 'echo y | sudo ./script/installation/packages.sh all'

                script{
                    utils = utils ?: load(utilsFileName)
                    utils.noisePageBuild(buildType:utils.RELEASE_BUILD, isBuildTests:false)
                }

                catchError(stageResult: 'Failure'){
                    sh script:'''
                    cd build
                    timeout 3h python3 ../script/testing/oltpbench/run_oltpbench.py --config-file=../script/testing/oltpbench/configs/nightly/nightly.json --build-type=release --publish-results=prod --publish-username=${PSS_CREATOR_USR} --publish-password=${PSS_CREATOR_PSW}
                    ''', label: 'OLTPBench (HDD WAL)'
                }
                catchError(stageResult: 'Failure'){
                    sh script:'''
                    cd build
                    timeout 3h python3 ../script/testing/oltpbench/run_oltpbench.py --config-file=../script/testing/oltpbench/configs/nightly/nightly_ramdisk.json --build-type=release --publish-results=prod --publish-username=${PSS_CREATOR_USR} --publish-password=${PSS_CREATOR_PSW}
                    ''', label: 'OLTPBench (RamDisk WAL)'
                }
                catchError(stageResult: 'Failure'){
                    sh script:'''
                    cd build
                    timeout 3h python3 ../script/testing/oltpbench/run_oltpbench.py --config-file=../script/testing/oltpbench/configs/nightly/nightly_wal_disabled.json --build-type=release --publish-results=prod --publish-username=${PSS_CREATOR_USR} --publish-password=${PSS_CREATOR_PSW}
                    ''', label: 'OLTPBench (No WAL)'
                }

                archiveArtifacts(artifacts: 'build/oltp_result/**/*.*', excludes: 'build/oltp_result/**/*.csv', fingerprint: true)
            }
            post {
                cleanup {
                    deleteDir()
                }
            }
        }

        stage('Microbenchmark') {
            agent { label 'benchmark' }
            steps {
                sh 'echo $NODE_NAME'
                sh 'echo y | sudo ./script/installation/packages.sh all'

                script{
                    utils = utils ?: load(utilsFileName)
                    utils.noisePageBuild(buildType:utils.RELEASE_BUILD, isBuildTests:false, isBuildBenchmarks:true)
                }

                // The micro_bench configuration has to be consistent because we currently check against previous runs with the same config
                //  # of Threads: 4
                //  WAL Path: Ramdisk
                sh script:'''
                cd script/testing
                python3 microbench/run_microbench.py --run --num-threads=4 --benchmark-path $(pwd)/../../build/benchmark --logfile-path=/mnt/ramdisk/benchmark.log --publish-results=prod --publish-username=${PSS_CREATOR_USR} --publish-password=${PSS_CREATOR_PSW}
                ''', label:'Microbenchmark'

                archiveArtifacts 'script/testing/*.json'
                junit 'script/testing/*.xml'
            }
            post {
                cleanup {
                    deleteDir()
                }
            }
        }
    }
}
